Practical task

Application called “Note Manager”

The application must help users to create, edit, and delete their personal notes, and maintain the structure of folders and tags.

 

FUNCTIONAL REQUIREMENTS:

The “Search” function can be switched to “simple” and “advanced” modes. In “simple” mode the search goes only through the names of notes, and in “advanced” mode can search through the content of notes and tags.
 “Search” must support autocomplete (suggestion - React Autocomplete).
The order of the notes inside a folder can be changed by using drag-and-drop (suggestion - React DnD).
Insightful tooltips should appear when a user hovers over any element of the interface.
Names of notes and folders must be editable inline.
After clicking on a note icon, the details of that note be displayed with full text and tags.
OTHER REQUIREMENTS:

The solution must utilize ES6 and have two build types: for production and development respectfully.
React Hot Loader or react-transform-webpack-hmr should be used for deployment. It’s more convenient and it will burst your productivity.
The solution must use an intelligent routing system in order to save the state of opened directories, search results and note details. It is necessary to handle 404 and 500 statuses (suggestion - React Router).
Minimize the usage of `state` in components by adding a Flux implementation to the solution. Provide a description of every action or action creator and the tasks they perform (suggestion - Redux).
The use of third-party components is permitted. Using new approaches to writing styles in React.js applications (CSS Modules / Radium (inline styles) / PostCSS) is a plus.

Mockups





Backend

You can download mockup server here.

API

GET INDEX PAGE

GET     /

Returns index.html

GET DIRECTORIES

GET     /directories

Returns directories list

CREATE DIRECTORY

POST    /directories

Create a new directory and return it along with its ID. You must specify the parent ID and name fields

UPDATE DIRECTORY

PUT     /directories/:id

Update directory

DELETE DIRECTORY

DELETE  /directories/:id

Delete directory

GET NOTICES

GET     /notices

Return notices list

CREATE NOTICE

POST    /notices

Create new notice and return it with an ID and position. You must specify the directory ID, title, description and tags fields

UPDATE NOTICE

PUT     /notices/:id

Update notice (can be used for changing a position)

DELETE NOTICE

DELETE  /notices/:id

Delete notice